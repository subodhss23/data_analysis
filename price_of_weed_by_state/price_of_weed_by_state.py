# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
plt.style.use("ggplot")
sns.set_style("darkgrid")
pd.set_option('display.max_columns', None)
# pd.set_option('display.max_rows', None)

df = pd.read_csv("weed_clean.csv")

df.shape

df.info()

df.columns

df.isna().sum()

df.head()

df[df["state"] == "California"]

df[df["state"] == "California"].plot(kind="bar", y=["highQ_price_ounce", "medQ_price_ounce"], title="California Weed Prices top_self vs mid_tear")

df[df["state"] == "California"].plot(kind="bar",\
                                     y=["percent_white","percent_black","percent_asian","percent_hispanic"], \
                                     title="California Weed consumption by Race")

df.sample()

state_with_highq_high_price = df.sort_values("highQ_price_ounce", ascending=False).head(1)["state"]

print(f"The price of weed with high quality is highest in {state_with_highq_high_price.iloc[0]}")

state_with_medq_high_price = df.sort_values("medQ_price_ounce", ascending=False).head(1)['state']

print(f"The price of weed with medium quality is highest in {state_with_medq_high_price.iloc[0]}")

state_with_highq_lowest_price = df.sort_values("highQ_price_ounce").head(1)['state']

print(f"The price of weed with high quality is lowest in {state_with_highq_lowest_price.iloc[0]}")

state_with_medq_lowest_price = df.sort_values("medQ_price_ounce").head(1)['state']

print(f"The price of weed with medium quality is lowest in {state_with_medq_lowest_price.iloc[0]}")

df.head()

df.loc[df["median_rent"] < 500].plot(kind="bar", x="state_s", y =["highQ_price_ounce", "medQ_price_ounce" ] )

df.loc[df["median_rent"] > 1000]

df.loc[df["median_rent"] > 1000].plot(kind="barh", figsize=(10, 5), x="state_s", y=["median_rent", "highQ_price_ounce", "medQ_price_ounce"])

df.head()

df.sort_values("per_capita_income").head(10)

df.sort_values("per_capita_income").head(10).plot(kind="bar", x="state_s", y="per_capita_income", title="Bottom 10 states by per capita income")

df.sort_values("per_capita_income", ascending=False).head(10)\
.plot(kind="bar", figsize=(10, 5), x="state_s", y="per_capita_income", title="Top 10 states by per capita income")

df.sample(2)

df.sort_values("total_population").head(10)

df.sort_values("total_population").head(10).plot(kind="bar", x="state_s", y="total_population", title="Bottom 10 states by total population")

df.sort_values("total_population", ascending=False).head(10)\
.plot(kind="bar", figsize=(10, 5), x="state_s", y="total_population", title="Top 10 states by total population")

df.sample(2)

df.sort_values("median_age").head(10)

df.sort_values("median_age").head(10).plot(kind="bar", x="state_s", y="median_age", title="Top 10 states by median age")

df.sort_values("median_age", ascending=False).head(10).plot(kind="bar", figsize=(10, 5), x="state_s", y="median_age", title="Top 10 states by median age")

df.sample(2)

df[df["medQ_price_ounce"] < 200]

df[df["medQ_price_ounce"] < 200].plot(kind="bar", x="state_s", y=["highQ_price_ounce", "medQ_price_ounce"], \
                                      figsize=(10,5), title="Weed Prices by State where medium quality is less than $200")

df.loc[df["per_capita_income"] < 25000]

df.loc[df["per_capita_income"] < 25000].plot(kind="bar", figsize=(10, 5), x="state_s", y="per_capita_income", title="States with less than $25000 per capita income")

df.sample(2)

# find states with highest population and highest per_capita_income, compare the price in those states
df.loc[df["total_population"] == df["total_population"].max()]

df.loc[df["per_capita_income"] == df["per_capita_income"].max()]

df.loc[(df["total_population"] > 10000000) & (df["per_capita_income"] > 25000)]

df.loc[(df["total_population"] > 10000000) & (df["per_capita_income"] > 25000)].plot\
(kind="bar", figsize=(10, 5), x="state_s", y="total_population",ylabel="population", title="High population state with more than $25000 of median income")

df.sample(2)

df.sort_values("highQ_price_ounce", ascending=False).head(10)

df.sort_values("highQ_price_ounce", ascending=False).head(10).plot(kind="bar", x="state_s", y="highQ_price_ounce")

df.sort_values("highQ_price_ounce").head(10).plot(kind="bar", x="state_s", y="highQ_price_ounce")

df.sample(2)

df.sort_values("percent_white", ascending=False).head(3)

df.sort_values("percent_white", ascending=False).head(10).plot(kind="bar", x="state_s", \
                                                               y=["percent_white", "percent_black", "percent_asian","percent_hispanic"],\
                                                               log=True, figsize=(12, 5), title="Top 10 states by highest percent white population")

df.sort_values("percent_black", ascending=False).head(10).plot(kind="bar", x="state_s", \
                                                               y=[ "percent_black","percent_white", "percent_asian","percent_hispanic"],\
                                                               log=True, figsize=(12, 5), title="Top 10 states by highest percent black population")

df.sort_values("percent_asian", ascending=False).head(10).plot(kind="bar", x="state_s", \
                                                               y=[ "percent_black","percent_white", "percent_asian","percent_hispanic"],\
                                                               log=True, figsize=(12, 5), title="Top 10 states by highest percent asian population")

df.sort_values("percent_hispanic", ascending=False).head(10).plot(kind="bar", x="state_s", \
                                                               y=[ "percent_black","percent_white", "percent_asian","percent_hispanic"],\
                                                               log=True, figsize=(12, 5), title="Top 10 states by highest percent hispanic population")

correlation_matrix = df.corr(numeric_only=True)

# heatmap for correlation_matrix
fig, ax = plt.subplots(figsize=(10, 8))
ax = sns.heatmap(correlation_matrix, annot=True, linewidths=0.5, fmt=".2f", cmap="YlGnBu")

# pair plot
sns.pairplot(df)
plt.show()

